{"version":3,"sources":["../src/sdk/speech/CognitiveTokenAuthentication.ts"],"names":[],"mappings":";;AAAA,gDAAiF;AACjF,qDAA8D;AAE9D,IAAM,UAAU,GAAW,eAAe,CAAC;AAE3C;IAII,sCAAY,aAA4D,EAAE,qBAAoE;QAA9I,iBAWC;QAEM,UAAK,GAAG,UAAC,gBAAwB;YACpC,MAAM,CAAE,KAAI,CAAC,aAAa,CAAC,gBAAgB,CAAC,CAAC,qBAAqB,CAAC,UAAC,KAAa,IAAK,OAAA,IAAI,0BAAQ,CAAC,UAAU,EAAE,KAAK,CAAC,EAA/B,CAA+B,CAAC,CAAC;QAC3H,CAAC,CAAA;QAEM,kBAAa,GAAG,UAAC,gBAAwB;YAC5C,MAAM,CAAE,KAAI,CAAC,qBAAqB,CAAC,gBAAgB,CAAC,CAAC,qBAAqB,CAAC,UAAC,KAAa,IAAK,OAAA,IAAI,0BAAQ,CAAC,UAAU,EAAE,KAAK,CAAC,EAA/B,CAA+B,CAAC,CAAC;QACnI,CAAC,CAAA;QAlBG,EAAE,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;YACjB,MAAM,IAAI,2BAAiB,CAAC,eAAe,CAAC,CAAC;QACjD,CAAC;QAED,EAAE,CAAC,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC;YACzB,MAAM,IAAI,2BAAiB,CAAC,uBAAuB,CAAC,CAAC;QACzD,CAAC;QAED,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QACnC,IAAI,CAAC,qBAAqB,GAAG,qBAAqB,CAAC;IACvD,CAAC;IASL,mCAAC;AAAD,CAxBA,AAwBC,IAAA;AAxBY,oEAA4B","file":"CognitiveTokenAuthentication.js","sourcesContent":["import { ArgumentNullError, Promise, PromiseHelper } from \"../../common/Exports\";\nimport { AuthInfo, IAuthentication } from \"./IAuthentication\";\n\nconst AuthHeader: string = \"Authorization\";\n\nexport class CognitiveTokenAuthentication implements IAuthentication {\n    private fetchCallback: (authFetchEventId: string) => Promise<string>;\n    private fetchOnExpiryCallback: (authFetchEventId: string) => Promise<string>;\n\n    constructor(fetchCallback: (authFetchEventId: string) => Promise<string>, fetchOnExpiryCallback: (authFetchEventId: string) => Promise<string>) {\n        if (!fetchCallback) {\n            throw new ArgumentNullError(\"fetchCallback\");\n        }\n\n        if (!fetchOnExpiryCallback) {\n            throw new ArgumentNullError(\"fetchOnExpiryCallback\");\n        }\n\n        this.fetchCallback = fetchCallback;\n        this.fetchOnExpiryCallback = fetchOnExpiryCallback;\n    }\n\n    public Fetch = (authFetchEventId: string): Promise<AuthInfo> => {\n        return  this.fetchCallback(authFetchEventId).OnSuccessContinueWith((token: string) => new AuthInfo(AuthHeader, token));\n    }\n\n    public FetchOnExpiry = (authFetchEventId: string): Promise<AuthInfo> => {\n        return  this.fetchOnExpiryCallback(authFetchEventId).OnSuccessContinueWith((token: string) => new AuthInfo(AuthHeader, token));\n    }\n}\n"]}