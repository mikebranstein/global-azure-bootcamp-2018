{"version":3,"sources":["../src/sdk/speech/ServiceTelemetryListener.Internal.ts"],"names":[],"mappings":"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","file":"ServiceTelemetryListener.Internal.js","sourcesContent":["import {\n    AudioSourceErrorEvent,\n    AudioStreamNodeAttachedEvent,\n    AudioStreamNodeAttachingEvent,\n    AudioStreamNodeDetachedEvent,\n    AudioStreamNodeErrorEvent,\n    ConnectionClosedEvent,\n    ConnectionEstablishedEvent,\n    ConnectionEstablishErrorEvent,\n    ConnectionMessageReceivedEvent,\n    ConnectionStartEvent,\n    IEventListener,\n    IStringDictionary,\n    PlatformEvent,\n} from \"../../common/Exports\";\nimport {\n    ConnectingToServiceEvent,\n    RecognitionTriggeredEvent,\n} from \"./RecognitionEvents\";\n\ninterface ITelemetry {\n    Metrics: IMetric[];\n    ReceivedMessages: IStringDictionary<string[]>;\n}\n\n// tslint:disable-next-line:max-classes-per-file\ninterface IMetric {\n    End: string;\n    Error?: string;\n    Id?: string;\n    Name: string;\n    Start: string;\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class ServiceTelemetryListener implements IEventListener<PlatformEvent> {\n    private isDisposed: boolean = false;\n\n    private requestId: string;\n    private audioSourceId: string;\n    private audioNodeId: string;\n\n    private listeningTriggerMetric: IMetric = null;\n    private micMetric: IMetric = null;\n    private connectionEstablishMetric: IMetric = null;\n\n    private micStartTime: string;\n\n    private connectionId: string;\n    private connectionStartTime: string;\n\n    private receivedMessages: IStringDictionary<string[]>;\n\n    constructor(requestId: string, audioSourceId: string, audioNodeId: string) {\n        this.requestId = requestId;\n        this.audioSourceId = audioSourceId;\n        this.audioNodeId = audioNodeId;\n\n        this.receivedMessages = {};\n    }\n\n    public OnEvent = (e: PlatformEvent): void => {\n        if (this.isDisposed) {\n            return;\n        }\n\n        if (e instanceof RecognitionTriggeredEvent && e.RequestId === this.requestId) {\n            this.listeningTriggerMetric = {\n                End: e.EventTime,\n                Name: \"ListeningTrigger\",\n                Start: e.EventTime,\n            };\n        }\n\n        if (e instanceof AudioStreamNodeAttachingEvent && e.AudioSourceId === this.audioSourceId && e.AudioNodeId === this.audioNodeId) {\n            this.micStartTime = e.EventTime;\n        }\n\n        if (e instanceof AudioStreamNodeAttachedEvent && e.AudioSourceId === this.audioSourceId && e.AudioNodeId === this.audioNodeId) {\n            this.micStartTime = e.EventTime;\n        }\n\n        if (e instanceof AudioSourceErrorEvent && e.AudioSourceId === this.audioSourceId) {\n            if (!this.micMetric) {\n                this.micMetric = {\n                    End: e.EventTime,\n                    Error: e.Error,\n                    Name: \"Microphone\",\n                    Start: this.micStartTime,\n                };\n            }\n        }\n\n        if (e instanceof AudioStreamNodeErrorEvent && e.AudioSourceId === this.audioSourceId && e.AudioNodeId === this.audioNodeId) {\n            if (!this.micMetric) {\n                this.micMetric = {\n                    End: e.EventTime,\n                    Error: e.Error,\n                    Name: \"Microphone\",\n                    Start: this.micStartTime,\n                };\n            }\n        }\n\n        if (e instanceof AudioStreamNodeDetachedEvent && e.AudioSourceId === this.audioSourceId && e.AudioNodeId === this.audioNodeId) {\n            if (!this.micMetric) {\n                this.micMetric = {\n                    End: e.EventTime,\n                    Name: \"Microphone\",\n                    Start: this.micStartTime,\n                };\n            }\n        }\n\n        if (e instanceof ConnectingToServiceEvent && e.RequestId === this.requestId) {\n            this.connectionId = e.ConnectionId;\n        }\n\n        if (e instanceof ConnectionStartEvent && e.ConnectionId === this.connectionId) {\n            this.connectionStartTime = e.EventTime;\n        }\n\n        if (e instanceof ConnectionEstablishedEvent && e.ConnectionId === this.connectionId) {\n            if (!this.connectionEstablishMetric) {\n                this.connectionEstablishMetric = {\n                    End: e.EventTime,\n                    Id: this.connectionId,\n                    Name: \"Connection\",\n                    Start: this.connectionStartTime,\n                };\n            }\n        }\n\n        if (e instanceof ConnectionEstablishErrorEvent && e.ConnectionId === this.connectionId) {\n            if (!this.connectionEstablishMetric) {\n                this.connectionEstablishMetric = {\n                    End: e.EventTime,\n                    Error: this.GetConnectionError(e.StatusCode),\n                    Id: this.connectionId,\n                    Name: \"Connection\",\n                    Start: this.connectionStartTime,\n                };\n            }\n        }\n\n        if (e instanceof ConnectionMessageReceivedEvent && e.ConnectionId === this.connectionId) {\n            if (e.Message && e.Message.Headers && e.Message.Headers.path) {\n                if (!this.receivedMessages[e.Message.Headers.path]) {\n                    this.receivedMessages[e.Message.Headers.path] = new Array<string>();\n                }\n\n                this.receivedMessages[e.Message.Headers.path].push(e.NetworkReceivedTime);\n            }\n        }\n    }\n\n    public GetTelemetry = (): string => {\n        const metrics = new Array<IMetric>();\n\n        if (this.listeningTriggerMetric) {\n            metrics.push(this.listeningTriggerMetric);\n        }\n\n        if (this.micMetric) {\n            metrics.push(this.micMetric);\n        }\n\n        if (this.connectionEstablishMetric) {\n            metrics.push(this.connectionEstablishMetric);\n        }\n\n        const telemetry: ITelemetry = {\n            Metrics: metrics,\n            ReceivedMessages: this.receivedMessages,\n        };\n\n        const json = JSON.stringify(telemetry);\n\n        // We dont want to send the same telemetry again. So clean those out.\n        this.receivedMessages = {};\n        this.listeningTriggerMetric = null;\n        this.micMetric = null;\n        this.connectionEstablishMetric = null;\n\n        return json;\n    }\n\n    public Dispose = (): void => {\n        this.isDisposed = true;\n    }\n\n    private GetConnectionError = (statusCode: number): string => {\n        /*\n        -- Websocket status codes --\n        NormalClosure = 1000,\n        EndpointUnavailable = 1001,\n        ProtocolError = 1002,\n        InvalidMessageType = 1003,\n        Empty = 1005,\n        InvalidPayloadData = 1007,\n        PolicyViolation = 1008,\n        MessageTooBig = 1009,\n        MandatoryExtension = 1010,\n        InternalServerError = 1011\n        */\n\n        switch (statusCode) {\n            case 400:\n            case 1002:\n            case 1003:\n            case 1005:\n            case 1007:\n            case 1008:\n            case 1009: return \"BadRequest\";\n            case 401: return \"Unauthorized\";\n            case 403: return \"Forbidden\";\n            case 503:\n            case 1001: return \"ServerUnavailable\";\n            case 500:\n            case 1011: return \"ServerError\";\n            case 408:\n            case 504: return \"Timeout\";\n            default: return \"statuscode:\" + statusCode.toString();\n        }\n    }\n}\n"]}