{"version":3,"sources":["../src/common.browser/WebsocketMessageAdapter.ts"],"names":[],"mappings":"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","file":"WebsocketMessageAdapter.js","sourcesContent":["import {\n    ArgumentNullError,\n    ConnectionClosedEvent,\n    ConnectionEstablishedEvent,\n    ConnectionEstablishErrorEvent,\n    ConnectionEvent,\n    ConnectionMessage,\n    ConnectionMessageReceivedEvent,\n    ConnectionMessageSentEvent,\n    ConnectionOpenResponse,\n    ConnectionStartEvent,\n    ConnectionState,\n    Deferred,\n    Events,\n    EventSource,\n    IWebsocketMessageFormatter,\n    MessageType,\n    PlatformEvent,\n    Promise,\n    PromiseHelper,\n    Queue,\n    RawWebsocketMessage,\n} from \"../common/Exports\";\n\ninterface ISendItem {\n    Message: ConnectionMessage;\n    RawWebsocketMessage: RawWebsocketMessage;\n    SendStatusDeferral: Deferred<boolean>;\n}\n\nexport class WebsocketMessageAdapter {\n\n    private connectionState: ConnectionState;\n    private messageFormatter: IWebsocketMessageFormatter;\n    private websocketClient: WebSocket;\n\n    private sendMessageQueue: Queue<ISendItem>;\n    private receivingMessageQueue: Queue<ConnectionMessage>;\n    private connectionEstablishDeferral: Deferred<ConnectionOpenResponse>;\n    private disconnectDeferral: Deferred<boolean>;\n    private connectionEvents: EventSource<ConnectionEvent>;\n    private connectionId: string;\n    private uri: string;\n\n    public constructor(\n        uri: string,\n        connectionId: string,\n        messageFormatter: IWebsocketMessageFormatter) {\n\n        if (!uri) {\n            throw new ArgumentNullError(\"uri\");\n        }\n\n        if (!messageFormatter) {\n            throw new ArgumentNullError(\"messageFormatter\");\n        }\n\n        this.connectionEvents = new EventSource<ConnectionEvent>();\n        this.connectionId = connectionId;\n        this.messageFormatter = messageFormatter;\n        this.connectionState = ConnectionState.None;\n        this.uri = uri;\n    }\n\n    public get State(): ConnectionState {\n        return this.connectionState;\n    }\n\n    public Open = (): Promise<ConnectionOpenResponse> => {\n        if (this.connectionState === ConnectionState.Disconnected) {\n            return PromiseHelper.FromError<ConnectionOpenResponse>(`Cannot open a connection that is in ${this.connectionState} state`);\n        }\n\n        if (this.connectionEstablishDeferral) {\n            return this.connectionEstablishDeferral.Promise();\n        }\n\n        this.connectionEstablishDeferral = new Deferred<ConnectionOpenResponse>();\n        this.connectionState = ConnectionState.Connecting;\n\n        this.websocketClient = new WebSocket(this.uri);\n        this.websocketClient.binaryType = \"arraybuffer\";\n        this.receivingMessageQueue = new Queue<ConnectionMessage>();\n        this.disconnectDeferral = new Deferred<boolean>();\n        this.sendMessageQueue = new Queue<ISendItem>();\n        this.ProcessSendQueue();\n\n        this.OnEvent(new ConnectionStartEvent(this.connectionId, this.uri));\n\n        this.websocketClient.onopen = (e: Event) => {\n            this.connectionState = ConnectionState.Connected;\n            this.OnEvent(new ConnectionEstablishedEvent(this.connectionId));\n            this.connectionEstablishDeferral.Resolve(new ConnectionOpenResponse(200, \"\"));\n        };\n\n        this.websocketClient.onerror = (e: Event) => {\n            // TODO: Understand what this is error is. Will we still get onClose ?\n            if (this.connectionState !== ConnectionState.Connecting) {\n                // TODO: Is this required ?\n                // this.OnEvent(new ConnectionErrorEvent(errorMsg, connectionId));\n            }\n        };\n\n        this.websocketClient.onclose = (e: CloseEvent) => {\n            if (this.connectionState === ConnectionState.Connecting) {\n                this.connectionState = ConnectionState.Disconnected;\n                this.OnEvent(new ConnectionEstablishErrorEvent(this.connectionId, e.code, e.reason));\n                this.connectionEstablishDeferral.Resolve(new ConnectionOpenResponse(e.code, e.reason));\n            } else {\n                this.OnEvent(new ConnectionClosedEvent(this.connectionId, e.code, e.reason));\n            }\n\n            this.OnClose(e.code, e.reason);\n        };\n\n        this.websocketClient.onmessage = (e: MessageEvent) => {\n            const networkReceivedTime = new Date().toISOString();\n            if (this.connectionState === ConnectionState.Connected) {\n                const deferred = new Deferred<ConnectionMessage>();\n                // let id = ++this.idCounter;\n                this.receivingMessageQueue.EnqueueFromPromise(deferred.Promise());\n                if (e.data instanceof ArrayBuffer) {\n                    const rawMessage = new RawWebsocketMessage(MessageType.Binary, e.data);\n                    this.messageFormatter\n                        .ToConnectionMessage(rawMessage)\n                        .On((connectionMessage: ConnectionMessage) => {\n                            this.OnEvent(new ConnectionMessageReceivedEvent(this.connectionId, networkReceivedTime, connectionMessage));\n                            deferred.Resolve(connectionMessage);\n                        }, (error: string) => {\n                            // TODO: Events for these ?\n                            deferred.Reject(`Invalid binary message format. Error: ${error}`);\n                        });\n                } else {\n                    const rawMessage = new RawWebsocketMessage(MessageType.Text, e.data);\n                    this.messageFormatter\n                        .ToConnectionMessage(rawMessage)\n                        .On((connectionMessage: ConnectionMessage) => {\n                            this.OnEvent(new ConnectionMessageReceivedEvent(this.connectionId, networkReceivedTime, connectionMessage));\n                            deferred.Resolve(connectionMessage);\n                        }, (error: string) => {\n                            // TODO: Events for these ?\n                            deferred.Reject(`Invalid text message format. Error: ${error}`);\n                        });\n                }\n            }\n        };\n\n        return this.connectionEstablishDeferral.Promise();\n    }\n\n    public Send = (message: ConnectionMessage): Promise<boolean> => {\n        if (this.connectionState !== ConnectionState.Connected) {\n            return PromiseHelper.FromError<boolean>(`Cannot send on connection that is in ${this.connectionState} state`);\n        }\n\n        const messageSendStatusDeferral = new Deferred<boolean>();\n        const messageSendDeferral = new Deferred<ISendItem>();\n\n        this.sendMessageQueue.EnqueueFromPromise(messageSendDeferral.Promise());\n\n        this.messageFormatter\n            .FromConnectionMessage(message)\n            .On((rawMessage: RawWebsocketMessage) => {\n                messageSendDeferral.Resolve({\n                    Message: message,\n                    RawWebsocketMessage: rawMessage,\n                    SendStatusDeferral: messageSendStatusDeferral,\n                });\n            }, (error: string) => {\n                messageSendDeferral.Reject(`Error formatting the message. ${error}`);\n            });\n\n        return messageSendStatusDeferral.Promise();\n    }\n\n    public Read = (): Promise<ConnectionMessage> => {\n        if (this.connectionState !== ConnectionState.Connected) {\n            return PromiseHelper.FromError<ConnectionMessage>(`Cannot read on connection that is in ${this.connectionState} state`);\n        }\n\n        return this.receivingMessageQueue.Dequeue();\n    }\n\n    public Close = (reason?: string): Promise<boolean> => {\n        if (this.websocketClient) {\n            if (this.connectionState !== ConnectionState.Connected) {\n                this.websocketClient.close(1000, reason ? reason : \"Normal closure by client\");\n            }\n        } else {\n            const deferral = new Deferred<boolean>();\n            deferral.Resolve(true);\n            return deferral.Promise();\n        }\n\n        return this.disconnectDeferral.Promise();\n    }\n\n    public get Events(): EventSource<ConnectionEvent> {\n        return this.connectionEvents;\n    }\n\n    private SendRawMessage = (sendItem: ISendItem): Promise<boolean> => {\n        try {\n            this.OnEvent(new ConnectionMessageSentEvent(this.connectionId, new Date().toISOString(), sendItem.Message));\n            this.websocketClient.send(sendItem.RawWebsocketMessage.Payload);\n            return PromiseHelper.FromResult(true);\n        } catch (e) {\n            return PromiseHelper.FromError<boolean>(`websocket send error: ${e}`);\n        }\n    }\n\n    private OnClose = (code: number, reason: string): void => {\n        const closeReason = `Connection closed. ${code}: ${reason}`;\n        this.connectionState = ConnectionState.Disconnected;\n        this.disconnectDeferral.Resolve(true);\n        this.receivingMessageQueue.Dispose(reason);\n        this.receivingMessageQueue.DrainAndDispose((pendingReceiveItem: ConnectionMessage) => {\n            // TODO: Events for these ?\n            // Logger.Instance.OnEvent(new LoggingEvent(LogType.Warning, null, `Failed to process received message. Reason: ${closeReason}, Message: ${JSON.stringify(pendingReceiveItem)}`));\n        }, closeReason);\n\n        this.sendMessageQueue.DrainAndDispose((pendingSendItem: ISendItem) => {\n            pendingSendItem.SendStatusDeferral.Reject(closeReason);\n        }, closeReason);\n    }\n\n    private ProcessSendQueue = (): void => {\n        this.sendMessageQueue\n            .Dequeue()\n            .On((sendItem: ISendItem) => {\n                this.SendRawMessage(sendItem)\n                    .On((result: boolean) => {\n                        sendItem.SendStatusDeferral.Resolve(result);\n                        this.ProcessSendQueue();\n                    }, (sendError: string) => {\n                        sendItem.SendStatusDeferral.Reject(sendError);\n                        this.ProcessSendQueue();\n                    });\n            }, (error: string) => {\n                // do nothing\n            });\n    }\n\n    private OnEvent = (event: ConnectionEvent): void => {\n        this.connectionEvents.OnEvent(event);\n        Events.Instance.OnEvent(event);\n    }\n}\n"]}