{"version":3,"sources":["../src/common.browser/Timer.ts"],"names":[],"mappings":";;AAEA;IAII,eAAY,eAAuB,EAAE,eAAoB;QAAzD,iBAGC;QACM,UAAK,GAAG;YAAC,gBAAgB;iBAAhB,UAAgB,EAAhB,qBAAgB,EAAhB,IAAgB;gBAAhB,2BAAgB;;YAC5B,EAAE,CAAC,CAAC,KAAI,CAAC,OAAO,CAAC,CAAC,CAAC;gBACf,KAAI,CAAC,IAAI,EAAE,CAAC;YAChB,CAAC;YACD,KAAI,CAAC,OAAO,GAAG,UAAU,CAAC,KAAI,CAAC,eAAe,EAAE,KAAI,CAAC,eAAe,EAAE,MAAM,CAAC,CAAC;QAClF,CAAC,CAAA;QAEM,SAAI,GAAG;YACV,YAAY,CAAC,KAAI,CAAC,OAAO,CAAC,CAAC;QAC/B,CAAC,CAAA;QAZG,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;QACvC,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;IAC3C,CAAC;IAWL,YAAC;AAAD,CAlBA,AAkBC,IAAA;AAlBY,sBAAK","file":"Timer.js","sourcesContent":["import { ITimer } from \"../common/Exports\";\n\nexport class Timer implements ITimer {\n    private delayInMillisec: number;\n    private timerId: number;\n    private successCallback: any;\n    constructor(delayInMillisec: number, successCallback: any) {\n        this.delayInMillisec = delayInMillisec;\n        this.successCallback = successCallback;\n    }\n    public start = (...params: any[]): void => {\n        if (this.timerId) {\n            this.stop();\n        }\n        this.timerId = setTimeout(this.successCallback, this.delayInMillisec, params);\n    }\n\n    public stop = (): void => {\n        clearTimeout(this.timerId);\n    }\n}\n"]}