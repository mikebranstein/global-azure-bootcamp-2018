{"version":3,"sources":["../src/common/ConnectionMessage.ts"],"names":[],"mappings":";;AAAA,iCAAgD;AAChD,+BAA0C;AAG1C,IAAY,WAGX;AAHD,WAAY,WAAW;IACnB,6CAAI,CAAA;IACJ,iDAAM,CAAA;AACV,CAAC,EAHW,WAAW,GAAX,mBAAW,KAAX,mBAAW,QAGtB;AAED;IAQI,2BACI,WAAwB,EACxB,IAAS,EACT,OAAmC,EACnC,EAAW;QARP,SAAI,GAAQ,IAAI,CAAC;QAUrB,EAAE,CAAC,CAAC,WAAW,KAAK,WAAW,CAAC,IAAI,IAAI,IAAI,IAAI,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAC,CAAC;YAC5E,MAAM,IAAI,6BAAqB,CAAC,0BAA0B,CAAC,CAAC;QAChE,CAAC;QAED,EAAE,CAAC,CAAC,WAAW,KAAK,WAAW,CAAC,MAAM,IAAI,IAAI,IAAI,CAAC,CAAC,IAAI,YAAY,WAAW,CAAC,CAAC,CAAC,CAAC;YAC/E,MAAM,IAAI,6BAAqB,CAAC,6BAA6B,CAAC,CAAC;QACnE,CAAC;QAED,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC;QACtC,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,uBAAgB,EAAE,CAAC;IAC3C,CAAC;IAED,sBAAW,0CAAW;aAAtB;YACI,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC;QAC5B,CAAC;;;OAAA;IAED,sBAAW,sCAAO;aAAlB;YACI,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;QACxB,CAAC;;;OAAA;IAED,sBAAW,mCAAI;aAAf;YACI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC;QACrB,CAAC;;;OAAA;IAED,sBAAW,uCAAQ;aAAnB;YACI,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,KAAK,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC;gBAC1C,MAAM,IAAI,6BAAqB,CAAC,kCAAkC,CAAC,CAAC;YACxE,CAAC;YAED,MAAM,CAAC,IAAI,CAAC,IAAc,CAAC;QAC/B,CAAC;;;OAAA;IAED,sBAAW,yCAAU;aAArB;YACI,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,KAAK,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC;gBACxC,MAAM,IAAI,6BAAqB,CAAC,gCAAgC,CAAC,CAAC;YACtE,CAAC;YAED,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC;QACrB,CAAC;;;OAAA;IAED,sBAAW,iCAAE;aAAb;YACI,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC;QACnB,CAAC;;;OAAA;IACL,wBAAC;AAAD,CA3DA,AA2DC,IAAA;AA3DY,8CAAiB","file":"ConnectionMessage.js","sourcesContent":["import { InvalidOperationError } from \"./Error\";\nimport { CreateNoDashGuid } from \"./Guid\";\nimport { IStringDictionary } from \"./IDictionary\";\n\nexport enum MessageType {\n    Text,\n    Binary,\n}\n\nexport class ConnectionMessage {\n\n    private messageType: MessageType;\n    private headers: IStringDictionary<string>;\n    private body: any = null;\n\n    private id: string;\n\n    public constructor(\n        messageType: MessageType,\n        body: any,\n        headers?: IStringDictionary<string>,\n        id?: string) {\n\n        if (messageType === MessageType.Text && body && !(typeof (body) === \"string\")) {\n            throw new InvalidOperationError(\"Payload must be a string\");\n        }\n\n        if (messageType === MessageType.Binary && body && !(body instanceof ArrayBuffer)) {\n            throw new InvalidOperationError(\"Payload must be ArrayBuffer\");\n        }\n\n        this.messageType = messageType;\n        this.body = body;\n        this.headers = headers ? headers : {};\n        this.id = id ? id : CreateNoDashGuid();\n    }\n\n    public get MessageType(): MessageType {\n        return this.messageType;\n    }\n\n    public get Headers(): any {\n        return this.headers;\n    }\n\n    public get Body(): any {\n        return this.body;\n    }\n\n    public get TextBody(): string {\n        if (this.messageType === MessageType.Binary) {\n            throw new InvalidOperationError(\"Not supported for binary message\");\n        }\n\n        return this.body as string;\n    }\n\n    public get BinaryBody(): ArrayBuffer {\n        if (this.messageType === MessageType.Text) {\n            throw new InvalidOperationError(\"Not supported for text message\");\n        }\n\n        return this.body;\n    }\n\n    public get Id(): string {\n        return this.id;\n    }\n}\n"]}