{"version":3,"sources":["../src/common/List.ts"],"names":[],"mappings":"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","file":"List.js","sourcesContent":["import { ObjectDisposedError } from \"./Error\";\nimport { IDetachable } from \"./IDetachable\";\nimport { IStringDictionary } from \"./IDictionary\";\nimport { IDisposable } from \"./IDisposable\";\n\nexport interface IList<TItem> extends IDisposable {\n    Get(itemIndex: number): TItem;\n    First(): TItem;\n    Last(): TItem;\n\n    Add(item: TItem): void;\n    InsertAt(index: number, item: TItem): void;\n\n    RemoveFirst(): TItem;\n    RemoveLast(): TItem;\n    RemoveAt(index: number): TItem;\n    Remove(index: number, count: number): TItem[];\n    Clear(): void;\n\n    Length(): number;\n\n    OnAdded(addedCallback: () => void): IDetachable;\n    OnRemoved(removedCallback: () => void): IDetachable;\n    OnDisposed(disposedCallback: () => void): IDetachable;\n\n    Join(seperator?: string): string;\n\n    ToArray(): TItem[];\n\n    Any(callback?: (item: TItem, index: number) => boolean): boolean;\n    All(callback: (item: TItem) => boolean): boolean;\n    ForEach(callback: (item: TItem, index: number) => void): void;\n    Select<T2>(callback: (item: TItem, index: number) => T2): List<T2>;\n    Where(callback: (item: TItem, index: number) => boolean): List<TItem>;\n    OrderBy(compareFn: (a: TItem, b: TItem) => number): List<TItem>;\n    OrderByDesc(compareFn: (a: TItem, b: TItem) => number): List<TItem>;\n    Clone(): List<TItem>;\n    Concat(list: List<TItem>): List<TItem>;\n    ConcatArray(array: TItem[]): List<TItem>;\n}\n\nexport class List<TItem> implements IList<TItem>  {\n    private list: TItem[];\n    private subscriptionIdCounter: number = 0;\n    private addSubscriptions: IStringDictionary<() => void> = {};\n    private removeSubscriptions: IStringDictionary<() => void> = {};\n    private disposedSubscriptions: IStringDictionary<() => void> = {};\n    private disposeReason: string = null;\n\n    public constructor(list?: TItem[]) {\n        this.list = [];\n        // copy the list rather than taking as is.\n        if (list) {\n            for (const item of list) {\n                this.list.push(item);\n            }\n        }\n    }\n\n    public Get = (itemIndex: number): TItem => {\n        this.ThrowIfDisposed();\n        return this.list[itemIndex];\n    }\n\n    public First = (): TItem => {\n        return this.Get(0);\n    }\n\n    public Last = (): TItem => {\n        return this.Get(this.Length() - 1);\n    }\n\n    public Add = (item: TItem): void => {\n        this.ThrowIfDisposed();\n        this.InsertAt(this.list.length, item);\n    }\n\n    public InsertAt = (index: number, item: TItem): void => {\n        this.ThrowIfDisposed();\n        if (index === 0) {\n            this.list.unshift(item);\n        } else if (index === this.list.length) {\n            this.list.push(item);\n        } else {\n            this.list.splice(index, 0, item);\n        }\n        this.TriggerSubscriptions(this.addSubscriptions);\n    }\n\n    public RemoveFirst = (): TItem => {\n        this.ThrowIfDisposed();\n        return this.RemoveAt(0);\n    }\n\n    public RemoveLast = (): TItem => {\n        this.ThrowIfDisposed();\n        return this.RemoveAt(this.Length() - 1);\n    }\n\n    public RemoveAt = (index: number): TItem => {\n        this.ThrowIfDisposed();\n        return this.Remove(index, 1)[0];\n    }\n\n    public Remove = (index: number, count: number): TItem[] => {\n        this.ThrowIfDisposed();\n        const removedElements = this.list.splice(index, count);\n        this.TriggerSubscriptions(this.removeSubscriptions);\n        return removedElements;\n    }\n\n    public Clear = (): void => {\n        this.ThrowIfDisposed();\n        this.Remove(0, this.Length());\n    }\n\n    public Length = (): number => {\n        this.ThrowIfDisposed();\n        return this.list.length;\n    }\n\n    public OnAdded = (addedCallback: () => void): IDetachable => {\n        this.ThrowIfDisposed();\n        const subscriptionId = this.subscriptionIdCounter++;\n\n        this.addSubscriptions[subscriptionId] = addedCallback;\n\n        return {\n            Detach: () => {\n                delete this.addSubscriptions[subscriptionId];\n            },\n        };\n    }\n\n    public OnRemoved = (removedCallback: () => void): IDetachable => {\n        this.ThrowIfDisposed();\n        const subscriptionId = this.subscriptionIdCounter++;\n\n        this.removeSubscriptions[subscriptionId] = removedCallback;\n\n        return {\n            Detach: () => {\n                delete this.removeSubscriptions[subscriptionId];\n            },\n        };\n    }\n\n    public OnDisposed = (disposedCallback: () => void): IDetachable => {\n        this.ThrowIfDisposed();\n        const subscriptionId = this.subscriptionIdCounter++;\n\n        this.disposedSubscriptions[subscriptionId] = disposedCallback;\n\n        return {\n            Detach: () => {\n                delete this.disposedSubscriptions[subscriptionId];\n            },\n        };\n    }\n\n    public Join = (seperator?: string): string => {\n        this.ThrowIfDisposed();\n        return this.list.join(seperator);\n    }\n\n    public ToArray = (): TItem[] => {\n        const cloneCopy = Array<TItem>();\n        this.list.forEach((val: TItem) => {\n            cloneCopy.push(val);\n        });\n        return cloneCopy;\n    }\n\n    public Any = (callback?: (item: TItem, index: number) => boolean): boolean => {\n        this.ThrowIfDisposed();\n        if (callback) {\n            return this.Where(callback).Length() > 0;\n        } else {\n            return this.Length() > 0;\n        }\n    }\n\n    public All = (callback: (item: TItem) => boolean): boolean => {\n        this.ThrowIfDisposed();\n        return this.Where(callback).Length() === this.Length();\n    }\n\n    public ForEach = (callback: (item: TItem, index: number) => void): void => {\n        this.ThrowIfDisposed();\n        for (let i = 0; i < this.Length(); i++) {\n            callback(this.list[i], i);\n        }\n    }\n\n    public Select = <T2>(callback: (item: TItem, index: number) => T2): List<T2> => {\n        this.ThrowIfDisposed();\n        const selectList: T2[] = [];\n        for (let i = 0; i < this.list.length; i++) {\n            selectList.push(callback(this.list[i], i));\n        }\n\n        return new List<T2>(selectList);\n    }\n\n    public Where = (callback: (item: TItem, index: number) => boolean): List<TItem> => {\n        this.ThrowIfDisposed();\n        const filteredList = new List<TItem>();\n        for (let i = 0; i < this.list.length; i++) {\n            if (callback(this.list[i], i)) {\n                filteredList.Add(this.list[i]);\n            }\n        }\n        return filteredList;\n    }\n\n    public OrderBy = (compareFn: (a: TItem, b: TItem) => number): List<TItem> => {\n        this.ThrowIfDisposed();\n        const clonedArray = this.ToArray();\n        const orderedArray = clonedArray.sort(compareFn);\n        return new List(orderedArray);\n    }\n\n    public OrderByDesc = (compareFn: (a: TItem, b: TItem) => number): List<TItem> => {\n        this.ThrowIfDisposed();\n        return this.OrderBy((a: TItem, b: TItem) => compareFn(b, a));\n    }\n\n    public Clone = (): List<TItem> => {\n        this.ThrowIfDisposed();\n        return new List<TItem>(this.ToArray());\n    }\n\n    public Concat = (list: List<TItem>): List<TItem> => {\n        this.ThrowIfDisposed();\n        return new List<TItem>(this.list.concat(list.ToArray()));\n    }\n\n    public ConcatArray = (array: TItem[]): List<TItem> => {\n        this.ThrowIfDisposed();\n        return new List<TItem>(this.list.concat(array));\n    }\n\n    public IsDisposed = (): boolean => {\n        return this.list == null;\n    }\n\n    public Dispose = (reason?: string): void => {\n        if (!this.IsDisposed()) {\n            this.disposeReason = reason;\n            this.list = null;\n            this.addSubscriptions = null;\n            this.removeSubscriptions = null;\n            this.TriggerSubscriptions(this.disposedSubscriptions);\n        }\n    }\n\n    private ThrowIfDisposed = (): void => {\n        if (this.IsDisposed()) {\n            throw new ObjectDisposedError(\"List\", this.disposeReason);\n        }\n    }\n\n    private TriggerSubscriptions = (subscriptions: IStringDictionary<() => void>): void => {\n        if (subscriptions) {\n            for (const subscriptionId in subscriptions) {\n                if (subscriptionId) {\n                    subscriptions[subscriptionId]();\n                }\n            }\n        }\n    }\n}\n"]}