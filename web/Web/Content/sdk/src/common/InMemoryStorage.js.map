{"version":3,"sources":["../src/common/InMemoryStorage.ts"],"names":[],"mappings":";;AAAA,iCAA4C;AAI5C;IAAA;QAAA,iBAyCC;QAvCW,UAAK,GAA8B,EAAE,CAAC;QAEvC,QAAG,GAAG,UAAC,GAAW;YACrB,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBACP,MAAM,IAAI,yBAAiB,CAAC,KAAK,CAAC,CAAC;YACvC,CAAC;YAED,MAAM,CAAC,KAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAC3B,CAAC,CAAA;QAEM,aAAQ,GAAG,UAAC,GAAW,EAAE,UAAkB;YAC9C,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBACP,MAAM,IAAI,yBAAiB,CAAC,KAAK,CAAC,CAAC;YACvC,CAAC;YAED,EAAE,CAAC,CAAC,KAAI,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,SAAS,CAAC,CAAC,CAAC;gBAChC,KAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,UAAU,CAAC;YACjC,CAAC;YAED,MAAM,CAAC,KAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAC3B,CAAC,CAAA;QAEM,QAAG,GAAG,UAAC,GAAW,EAAE,KAAa;YACpC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBACP,MAAM,IAAI,yBAAiB,CAAC,KAAK,CAAC,CAAC;YACvC,CAAC;YAED,KAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;QAC5B,CAAC,CAAA;QAEM,WAAM,GAAG,UAAC,GAAW;YACxB,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBACP,MAAM,IAAI,yBAAiB,CAAC,KAAK,CAAC,CAAC;YACvC,CAAC;YAED,EAAE,CAAC,CAAC,KAAI,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,SAAS,CAAC,CAAC,CAAC;gBAChC,OAAO,KAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAC3B,CAAC;QACL,CAAC,CAAA;IACL,CAAC;IAAD,sBAAC;AAAD,CAzCA,AAyCC,IAAA;AAzCY,0CAAe","file":"InMemoryStorage.js","sourcesContent":["import { ArgumentNullError } from \"./Error\";\nimport { IStringDictionary } from \"./IDictionary\";\nimport { IKeyValueStorage } from \"./IKeyValueStorage\";\n\nexport class InMemoryStorage implements IKeyValueStorage {\n\n    private store: IStringDictionary<string> = {};\n\n    public Get = (key: string): string => {\n        if (!key) {\n            throw new ArgumentNullError(\"key\");\n        }\n\n        return this.store[key];\n    }\n\n    public GetOrAdd = (key: string, valueToAdd: string): string => {\n        if (!key) {\n            throw new ArgumentNullError(\"key\");\n        }\n\n        if (this.store[key] === undefined) {\n            this.store[key] = valueToAdd;\n        }\n\n        return this.store[key];\n    }\n\n    public Set = (key: string, value: string): void => {\n        if (!key) {\n            throw new ArgumentNullError(\"key\");\n        }\n\n        this.store[key] = value;\n    }\n\n    public Remove = (key: string): void => {\n        if (!key) {\n            throw new ArgumentNullError(\"key\");\n        }\n\n        if (this.store[key] !== undefined) {\n            delete this.store[key];\n        }\n    }\n}\n"]}