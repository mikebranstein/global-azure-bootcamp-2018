{"version":3,"sources":["../src/common/Events.ts"],"names":[],"mappings":";;AAAA,iCAA4C;AAC5C,6CAA4C;AAI5C;IAAA;IAcA,CAAC;IAHG,sBAAkB,kBAAQ;aAA1B;YACI,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC;QAC3B,CAAC;;;OAAA;IAZc,eAAQ,GAAgC,IAAI,yBAAW,EAAiB,CAAC;IAE1E,qBAAc,GAAG,UAAC,WAAwC;QACpE,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;YACf,MAAM,IAAI,yBAAiB,CAAC,aAAa,CAAC,CAAC;QAC/C,CAAC;QAED,MAAM,CAAC,QAAQ,GAAG,WAAW,CAAC;IAClC,CAAC,CAAA;IAKL,aAAC;CAdD,AAcC,IAAA;AAdY,wBAAM","file":"Events.js","sourcesContent":["import { ArgumentNullError } from \"./Error\";\nimport { EventSource } from \"./EventSource\";\nimport { IEventSource } from \"./IEventSource\";\nimport { PlatformEvent } from \"./PlatformEvent\";\n\nexport class Events {\n    private static instance: IEventSource<PlatformEvent> = new EventSource<PlatformEvent>();\n\n    public static SetEventSource = (eventSource: IEventSource<PlatformEvent>): void => {\n        if (!eventSource) {\n            throw new ArgumentNullError(\"eventSource\");\n        }\n\n        Events.instance = eventSource;\n    }\n\n    public static get Instance(): IEventSource<PlatformEvent> {\n        return Events.instance;\n    }\n}\n"]}